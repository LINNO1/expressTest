#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('photo:server');
var http = require('http');
const mysql= require('mysql');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/*server.listen(port);*/
let db = mysql.createConnection({
  host: '127.0.0.1',
  user: 'root',
  password: 'ljm26918',
  database: 'timetrack'
});
// 建立表
/*db.query("CREATE TABLE IF NOT EXISTS photolist ("
  + "id INT(10) NOT NULL AUTO_INCREMENT,"
  + "name TEXT,"
  + "path TEXT,"
  + "PRIMARY KEY(id))",
  function(err){
    if(err) throw err;
    console.log('Server starting...');
    server.listen(port); // 启动http服务器
    server.on('error', onError);
    server.on('listening', onListening);
  });*/

/*db.query("CREATE TABLE IF NOT EXISTS userinfo ("
  + "id INT(10) NOT NULL AUTO_INCREMENT,"
  + "name TEXT,"
  + "pass TEXT,"
  + "salt TEXT,"
  + "PRIMARY KEY(id))",
  function(err){
    if(err) throw err;
    console.log('Server starting...');
    server.listen(port); // 启动http服务器
    server.on('error', onError);
    server.on('listening', onListening);
  });*/
  db.query("CREATE TABLE IF NOT EXISTS entry ("
  + "id INT(10) NOT NULL AUTO_INCREMENT,"
  + "name TEXT,"
  + "body TEXT,"
  + "title MEDIUMTEXT,"
  + "PRIMARY KEY(id))",
  function(err){
    if(err) throw err;
    console.log('Server starting...');
    server.listen(port); // 启动http服务器
    server.on('error', onError);
    server.on('listening', onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
